//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bonisoft.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class bonisoftEntities : DbContext
    {
        public bonisoftEntities()
            : base("name=bonisoftEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<camion> camiones { get; set; }
        public virtual DbSet<camion_ejes> camion_ejes { get; set; }
        public virtual DbSet<cargador> cargadores { get; set; }
        public virtual DbSet<cliente> clientes { get; set; }
        public virtual DbSet<cuadrilla_descarga> cuadrilla_descarga { get; set; }
        public virtual DbSet<descarga_viaje> descarga_viaje { get; set; }
        public virtual DbSet<forma_de_pago> forma_de_pago { get; set; }
        public virtual DbSet<lena_tipo> lena_tipo { get; set; }
        public virtual DbSet<log> logs { get; set; }
        public virtual DbSet<procesador> procesadores { get; set; }
        public virtual DbSet<proveedor> proveedores { get; set; }
        public virtual DbSet<proveedor_carga> proveedor_carga { get; set; }
        public virtual DbSet<roles_usuario> roles_usuario { get; set; }
        public virtual DbSet<usuario> usuarios { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<chofer> choferes { get; set; }
        public virtual DbSet<fletero> fleteros { get; set; }
        public virtual DbSet<fletero_pagos> fletero_pagos { get; set; }
        public virtual DbSet<viaje> viajes { get; set; }
        public virtual DbSet<cliente_pagos> cliente_pagos { get; set; }
        public virtual DbSet<proveedor_pagos> proveedor_pagos { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int sp_MSSsmaDmDisableConstraints(string key_type, Nullable<int> mode, Nullable<int> parallel_load, Nullable<int> minimal_logging, ObjectParameter error_log)
        {
            var key_typeParameter = key_type != null ?
                new ObjectParameter("key_type", key_type) :
                new ObjectParameter("key_type", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(int));
    
            var parallel_loadParameter = parallel_load.HasValue ?
                new ObjectParameter("parallel_load", parallel_load) :
                new ObjectParameter("parallel_load", typeof(int));
    
            var minimal_loggingParameter = minimal_logging.HasValue ?
                new ObjectParameter("minimal_logging", minimal_logging) :
                new ObjectParameter("minimal_logging", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSSsmaDmDisableConstraints", key_typeParameter, modeParameter, parallel_loadParameter, minimal_loggingParameter, error_log);
        }
    
        public virtual int sp_MSSsmaDmFixConstraints(string key_type, Nullable<int> mode, Nullable<int> parallel_load, Nullable<int> minimal_logging, ObjectParameter error_log)
        {
            var key_typeParameter = key_type != null ?
                new ObjectParameter("key_type", key_type) :
                new ObjectParameter("key_type", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(int));
    
            var parallel_loadParameter = parallel_load.HasValue ?
                new ObjectParameter("parallel_load", parallel_load) :
                new ObjectParameter("parallel_load", typeof(int));
    
            var minimal_loggingParameter = minimal_logging.HasValue ?
                new ObjectParameter("minimal_logging", minimal_logging) :
                new ObjectParameter("minimal_logging", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSSsmaDmFixConstraints", key_typeParameter, modeParameter, parallel_loadParameter, minimal_loggingParameter, error_log);
        }
    }
}
